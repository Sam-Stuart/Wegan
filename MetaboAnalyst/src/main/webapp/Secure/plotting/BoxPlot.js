var URL = document.getElementById("mydir").value;

var margin = { top: 30, right: 30, bottom: 50, left: 60 },
    width = 480 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;
/**
 *
 * @param {*} id The id of the div that we want to plot in
 * @returns a graph object (g) generated by D3
 */
function createSVG(id) {
    return d3
        .select(`#${id}`)
        .classed("plot_container", true)
        .append("svg")
        .classed("svg", true)
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
}

/**
 *
 * @param {*} data Data read from JSON
 * @returns An object that contains information for plotting
 */
function extractData(data) {
    const [xLabel, yLabel] = data.axis;

    const dataValue = data.labels.map((e, i) => ({
        label: e,
        ymin: data.quantiles.ymin[i],
        ymax: data.quantiles.ymax[i],
        q1: data.quantiles.lower[i],
        median: data.quantiles.middle[i],
        q3: data.quantiles.upper[i],
        color: data.colors[i],
    }));

    return {
        title: data.main,
        xLabel,
        yLabel,
        labels: data.labels,
        quantiles: data.quantiles,
        dataValue,
    };
}

function addToolTip(id) {
    return d3
        .select("body")
        .append("div")
        .attr("id", "tooltip" + id)
        .attr("class", "tooltip_viz")
        .style("opacity", 0)
        .style("position", "absolute");
}

function buildBoxPlot(jsonName, id) {
    d3.json("/MetaboAnalyst" + URL + "/" + jsonName, function (data) {
        //Create svg
        const svg = createSVG(id);

        //Extract data
        const { title, xLabel, yLabel, labels, quantiles, dataValue } =
            extractData(data);

        //Create xScale
        const x = d3
            .scaleBand()
            .range([0, width])
            .domain(labels)
            .paddingInner(1)
            .paddingOuter(0.5);

        //Create xAxis
        svg.append("g")
            .attr("transform", `translate(0, ${height})`)
            .call(d3.axisBottom(x));

        //xAxis label
        svg.append("text")
            .text(xLabel)
            .attr("x", width / 2 - 30)
            .attr("y", height + 30)
            .style("font-size", "15px");

        //Create yScale
        const y = d3
            .scaleLinear()
            .domain([
                Math.floor(d3.min(quantiles.ymin)),
                Math.ceil(d3.max(quantiles.ymax)),
            ])
            .range([height, 0]);
        svg.append("g").call(
            d3.axisLeft(y).tickFormat((e) => {
                if (e % 1 == 0) return e;
                return;
            })
        );
        // Add tooltip
        const tooltip = addToolTip(id);

        //Create vertical lines
        svg.selectAll("vertLines")
            .data(dataValue)
            .enter()
            .append("line")
            .attr("x1", function (d) {
                return x(d.label);
            })
            .attr("x2", function (d) {
                return x(d.label);
            })
            .attr("y1", function (d) {
                return y(d.ymin);
            })
            .attr("y2", function (d) {
                return y(d.ymax);
            })
            .attr("stroke", "black")
            .style("width", 40);

        // rectangle for the main box
        var boxWidth = 100;
        svg.selectAll("boxes")
            .data(dataValue)
            .enter()
            .append("rect")
            .attr("x", function (d) {
                return x(d.label) - boxWidth / 2;
            })
            .attr("y", function (d) {
                return y(d.q3);
            })
            .attr("height", function (d) {
                return y(d.q1) - y(d.q3);
            })
            .attr("width", boxWidth)
            .attr("stroke", "black")
            .style("fill", function (d) {
                return d.color;
            })
            .on("mouseover", function (d) {
                tooltip
                    .style("opacity", 0.8)
                    .html(
                        `Min: ${d.ymin} <br> Q1: ${d.q1} <br> Median: ${d.median} <br> Q3: ${d.q3} <br> Max: ${d.ymax}`
                    )
                    .style("left", event.pageX + 5 + "px")
                    .style("top", event.pageY + "px");
            })
            .on("mouseout", function (d) {
                tooltip.transition(200).style("opacity", 0);
            });

        // Show the median
        svg.selectAll("medianLines")
            .data(dataValue)
            .enter()
            .append("line")
            .attr("x1", function (d) {
                return x(d.label) - boxWidth / 2;
            })
            .attr("x2", function (d) {
                return x(d.label) + boxWidth / 2;
            })
            .attr("y1", function (d) {
                return y(d.median);
            })
            .attr("y2", function (d) {
                return y(d.median);
            })
            .attr("stroke", "black")
            .style("width", 80);
    });
}
buildBoxPlot("plot_box_chart.json", "d3_boxplot");
