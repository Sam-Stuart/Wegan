<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="/frags/_anal_template.xhtml">
    <ui:define name="metaInfo">
        <f:event type="preRenderView" listener="#{diversityBean.performDefaultAnalysis('Beta')}"/> 
    </ui:define>
    
    <div id="scatter_plot"></div>
      <script>
//        var margin = {top: 20, right: 20, bottom: 30, left: 50},
//            width = 960 - margin.left - margin.right,
//            height = 600 - margin.top - margin.bottom;
//
//        var D=[
//          {x: 100, y : 100},
//          {x: 200, y : 200},
//          {x: 300, y : 300},
//          {x: 400, y : 400},
//          {x: 500, y : 500}
//        ];
//
//        var svg = d3.select("#my_dataviz").append("svg")
//            .attr("width", width + margin.left + margin.right)
//            .attr("height", height + margin.top + margin.bottom)
//          .append("g")
//            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
//
//        svg.append('g').selectAll('.myPoint')
//          .data(D)
//          .enter()
//          .append('image')
//          .attr("xlink:href", "diversity_icon.png")
//          .attr("x", function(d){ return d.x })
//          .attr("y", function(d){ return d.y })
//          .attr("width", 16)
//          .attr("height", 16);
  
        var w = 940,
            h = 300,
            pad = 20,
            left_pad = 100,
            Data_url = "data.json";

          var svg = d3
            .select("#scatter_plot")
            .append("svg")
            .attr("width", w)
            .attr("height", h);

          var x = d3.scale
              .linear()
              .domain([0, 23])
              .range([left_pad, w - pad]),
            y = d3.scale
              .linear()
              .domain([0, 6])
              .range([pad, h - pad * 2]);

          var xAxis = d3.svg
              .axis()
              .scale(x)
              .orient("bottom")
              .ticks(24)
              .tickFormat(function (d, i) {
                var m = d > 12 ? "p" : "a";
                return d % 12 == 0 ? 12 + m : (d % 12) + m;
              }),
            yAxis = d3.svg
              .axis()
              .scale(y)
              .orient("left")
              .ticks(7)
              .tickFormat(function (d, i) {
                return [
                  "Sunday",
                  "Monday",
                  "Tuesday",
                  "Wednesday",
                  "Thursday",
                  "Friday",
                  "Saturday",
                ][d];
              });

          svg
            .append("g")
            .attr("class", "axis")
            .attr("transform", "translate(0, " + (h - pad) + ")")
            .call(xAxis);

          svg
            .append("g")
            .attr("class", "axis")
            .attr("transform", "translate(" + (left_pad - pad) + ", 0)")
            .call(yAxis);

          svg
            .append("text")
            .attr("class", "loading")
            .text("Loading ...")
            .attr("x", function () {
              return w / 2;
            })
            .attr("y", function () {
              return h / 2 - 5;
            });

          d3.json(Data_url, function (punchcard_data) {
            var max_r = d3.max(
                punchcard_data.map(function (d) {
                  return d[2];
                })
              ),
              r = d3.scale
                .linear()
                .domain([
                  0,
                  d3.max(punchcard_data, function (d) {
                    return d[2];
                  }),
                ])
                .range([0, 12]);

            svg.selectAll(".loading").remove();

            svg
              .selectAll("circle")
              .data(punchcard_data)
              .enter()
              .append("circle")
              .attr("class", "circle")
              .attr("cx", function (d) {
                return x(d[1]);
              })
              .attr("cy", function (d) {
                return y(d[0]);
              })
              .transition()
              .duration(800)
              .attr("r", function (d) {
                return r(d[2]);
              });
          });
//         console.log("start of d3 script")
//         
//         var svg = d3.select("#scatter_plot").append("svg"),
//         margin = 200, width = svg.attr("width") - margin,
//         height = svg.attr("height") - margin;
//         console.log(svg)
//         svg.append("text")
//            .attr("transform", "translate(100,0)")
//            .attr("x", 50).attr("y", 50)
//            .attr("font-size", "20px")
//            .attr("class", "title")
//            .text("Population bar chart")
//            
//         var x = d3.scaleBand().range([0, width]).padding(0.4),
//         y = d3.scaleLinear().range([height, 0]);
//         console.log(x)
//         var g = svg.append("g")
//            .attr("transform", "translate(" + 100 + "," + 100 + ")");
//
//         d3.json("data.json", function(error, data) {
//            if (error) {
//               throw error;
//            }
//               
//            x.domain(data.map(function(d) { return d.year; }));
//            y.domain([0, d3.max(data, function(d) { return d.population; })]);
//                     
//            g.append("g")
//               .attr("transform", "translate(0," + height + ")")
//               .call(d3.axisBottom(x))
//               .append("text")
//               .attr("y", height - 250)
//               .attr("x", width - 100)
//               .attr("text-anchor", "end")
//               .attr("font-size", "18px")
//               .attr("stroke", "blue").text("year");
//               
//            g.append("g")
//               .append("text")
//               .attr("transform", "rotate(-90)")
//               .attr("y", 6)
//               .attr("dy", "-5.1em")
//               .attr("text-anchor", "end")
//               .attr("font-size", "18px")
//               .attr("stroke", "blue")
//               .text("population");
//                         
//            g.append("g")
//               .attr("transform", "translate(0, 0)")
//               .call(d3.axisLeft(y))
//
//            g.selectAll(".bar")
//               .data(data)
//               .enter()
//               .append("rect")
//               .attr("class", "bar")
//               .on("mouseover", onMouseOver) 
//               .on("mouseout", onMouseOut)   
//               .attr("x", function(d) { return x(d.year); })
//               .attr("y", function(d) { return y(d.population); })
//               .attr("width", x.bandwidth()).transition()
//               .ease(d3.easeLinear).duration(200)
//               .delay(function (d, i) {
//                  return i * 25;
//               })
//                  
//            .attr("height", function(d) { return height - y(d.population); });
//         });
//          
//          
//         function onMouseOver(d, i) {
//            d3.select(this)
//            .attr('class', 'highlight');
//               
//            d3.select(this)
//               .transition()     
//               .duration(200)
//               .attr('width', x.bandwidth() + 5)
//               .attr("y", function(d) { return y(d.population) - 10; })
//               .attr("height", function(d) { return height - y(d.population) + 10; });
//              
//            g.append("text")
//               .attr('class', 'val')
//               .attr('x', function() {
//                  return x(d.year);
//               })
//               
//            .attr('y', function() {
//               return y(d.value) - 10;
//            })
//         }
//          
//         function onMouseOut(d, i) {
//             
//            d3.select(this)
//               .attr('class', 'bar');
//            
//            d3.select(this)
//               .transition()     
//               .duration(200)
//               .attr('width', x.bandwidth())
//               .attr("y", function(d) { return y(d.population); })
//               .attr("height", function(d) { return height - y(d.population); });
//            
//            d3.selectAll('.val')
//               .remove()
//         }
         
       
      </script>
    
    
    
    
    
    
    <ui:define name="content">
        <h:panelGrid style="padding:4px 20px 20px 20px; font-size: 12px; line-height: 23px; width:100%">
            <p:tabView id="beta">
                <p:tab title ="Overview" titleStyleClass="p-tab-nav">
                    <h:form id="form1">
                        <h:panelGrid id="panelGrid4" columns="2" cellpadding="3" style="float: right; text-shadow: none !important;"> 
                            <p:commandButton value="Update" 
                                             styleClass="updateButton"
                                             style="box-shadow: none !important; text-shadow: none !important"
                                            onclick="PF('statusDialog').show()"
                                            oncomplete="PF('statusDialog').hide()"  
                                            update=":beta:form1:betaPane1  :cmdPane" 
                                            actionListener="#{betaBean.betaUpdate_action()}"/>                          
                        </h:panelGrid>
                        
                        <h:panelGrid class="resultsBar" columns="2">
                            <h:panelGroup>
                                <h:panelGrid columns="1" style="text-align : left;">
                                    Results
                                </h:panelGrid>
                            </h:panelGroup> 
                            <h:panelGroup>
                                <h:panelGrid columns="3" class="resultsImages">
                                    <i class="fa fa-question-circle"></i>
                                </h:panelGrid>
                            </h:panelGroup>                            
                        </h:panelGrid>
                        <h:panelGrid id="betaPane1" style="width: 100%;">
                            <h:panelGrid columns="2" style="width: 100%; line-height: 25px; border-bottom: 2px solid #8cbd48">
                                
                            </h:panelGrid>
                                                    
                             <h:panelGrid columns="1" style="width: 100%; line-height: 25px; text-align: center">
                                <img onerror='this.style.display="none"' src="#{sessionBean1.getCurrentImageURL('div_beta')}" alt="BetaDiversity"/>
                            </h:panelGrid>                            
                        </h:panelGrid> 
                    </h:form>
                </p:tab>
                <p:tab title ="Tab 2" titleStyleClass="p-tab-nav">
                    <h:form id="form2">
                        
                    </h:form>
                </p:tab> 
                <p:tab title ="Tab 3" titleStyleClass="p-tab-nav">
                    <h:form id="form3">
                        
                    </h:form>
                </p:tab>        
            </p:tabView>
        </h:panelGrid>
    </ui:define>
</ui:composition>
