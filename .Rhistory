
gather(key = "tax_rank",
value = "tax_name",
-c(1:54))
# Sum observation values for each taxon
obj$data$tax_abund <- metacoder::calc_taxon_abund(obj, # taxmap object
"tax_data", # The table in obj$data
cols = hmp_samples$sample_id)
# 174 unique taxon IDs
dim(obj$data$tax_abund)
# Count the number of samples
obj$data$tax_occ <- metacoder::calc_n_samples(obj, # A taxmp object
"tax_abund",
groups = hmp_samples$body_site, # Group columns per treatment/group
cols = hmp_samples$sample_id)
print(obj$data$tax_occ)
set.seed(1) # This makes the plot appear the same every time it is generated
metacoder::heat_tree(obj, # A taxmap object
node_label = taxon_names,
node_size = n_obs,
node_color = Nose, # Non-standard evaluation (NSE)
node_size_axis_label = "OTU count",
node_color_axis_label = "Sample with reads",
layout = "davidson-harel", # The primary layout algorithm
initial_layout = "reingold-tilford") # The layout algorithm that initializes node locations
obj$data$diff_table <- metacoder::compare_groups(obj,
data = "tax_abund",
cols = hmp_samples$sample_id, # What columns of samples data to use
groups = hmp_samples$sex) # What category each sample is assigned to
print(obj$data$diff_table)
# FDR method
obj$data$diff_table$wilcox_p_value <- p.adjust(obj$data$diff_table$wilcox_p_value,
method = "fdr")
# View the distribution of p-values
range(obj$data$diff_table$wilcox_p_value, finite = TRUE)
set.seed(999)
metacoder::heat_tree(obj,
node_label = taxon_names,
node_size = n_obs, # n_obs in a function that calculates the number of OTUs per taxon
node_color = log2_median_ratio, # A column from 'obj$data$diff_table'
node_color_interval = c(-2, 2), # The range of 'log2_median_ratio' to display
node_color_range = c("cyan", "gray", "tan"), # The color palette used
node_size_axis_label = "OTU count",
node_color_axis_label = "Log 2 ratio of median proportion",
layout = "davidson-harel", # The primary layout algorithm
initial_layout = "reingold-tilford") # The layout algorithm
obj$data$diff_table <- metacoder::compare_groups(obj,
data = "tax_abund",
cols = hmp_samples$sample_id,
groups = hmp_samples$body_site) # What category each sample is assigned to
print(obj$data$diff_table)
set.seed(1)
metacoder::heat_tree_matrix(obj,
data = "diff_table",
node_size = n_obs,
node_label = taxon_names,
node_color = log2_median_ratio,
node_color_range = diverging_palette(),
node_color_trans = "linear",
node_color_interval = c(-3, 3),
edge_color_interval = c(-3, 3),
node_size_axis_label = "Number of OTUs",
node_color_axis_label = "Log2 ratio median proportions",
layout = "davidson-harel",
initial_layout = "reingold-tilford",
output_file = "./Phylogeny_output.pdf")
# Subset phylum level, and add up count per taxon (instead of per sample)
phylum_sumCount <- taxa_data_df1_long %>%
dplyr::filter(tax_rank == "p_") %>%
gather(key = "sample_id",
value = "count",
-c(1:4, 55:56)) %>%
group_by(sample_id, # Aggregate counts per taxon
tax_name) %>%
summarise(count_perTaxon =  sum(count),
.groups = "drop")
taxa_data_df1_long
# Subset phylum level, and add up count per taxon (instead of per sample)
phylum_sumCount <- taxa_data_df1_long %>%
dplyr::filter(tax_rank == "p_") %>%
gather(key = "sample_id",
value = "count",
-c(1:4, 55:56)) %>%
mutate(count = as.numeric(count)) %>%
group_by(sample_id, # Aggregate counts per taxon
tax_name) %>%
summarise(count_perTaxon =  sum(count),
.groups = "drop")
# Subset phylum level, and add up count per taxon (instead of per sample)
phylum_sumCount <- taxa_data_df1_long %>%
dplyr::filter(tax_rank == "p_") %>%
gather(key = "sample_id",
value = "count",
-c(1:4, 55:56)) %>%
mutate(count = as.numeric(count)) %>%
group_by(sample_id, # Aggregate counts per taxon
tax_name) %>%
summarise(count_perTaxon =  sum(count),
.groups = "drop")
# Merge the above table with environmental variables by sample_id
phylum_sumCount2 <- phylum_sumCount %>%
left_join(hmp_samples, by = "sample_id")


phylum_sumCount3 <- phylum_sumCount2 %>%
mutate(sex = str_replace(sex, "^male", "Male")) %>%  # Replace male with Male
mutate(sex = str_replace(sex, "female", "Female")) %>% # Replace Female with female
filter(!is.na(tax_name))
topTaxon <- phylum_sumCount3 %>%
group_by(tax_name) %>%
summarise(averageCount = ave(count_perTaxon),
.groups = "drop") %>%
arrange(desc(averageCount)) %>%
distinct(tax_name, .keep_all = T) %>%
head(1) %>% # the top taxon with the most average counts across samples
pull(tax_name)
# Extract re-ordered taxa names
taxa_oder <- phylum_sumCount3 %>%
group_by(tax_name) %>%
summarise(averageCount = ave(count_perTaxon),
.groups = "drop") %>%
arrange(desc(averageCount)) %>%
distinct(tax_name, .keep_all = TRUE) %>%
filter(!is.na(tax_name)) %>%
pull(tax_name)
# Reorder sample_id by counts of "af"
afCount_df <- phylum_sumCount3 %>%
filter(tax_name == "af") %>%
select(sample_id, af_count = count_perTaxon)
# Descending order
phylum_sumCount4 <- phylum_sumCount3 %>%
left_join(afCount_df, by = "sample_id") %>%
arrange(desc(af_count))
# Extract re-ordered sample_id
level_order <- phylum_sumCount4 %>%



group_by(sample_id) %>%
summarise(af_perc = af_count/sum(count_perTaxon), .groups = "drop") %>%
distinct(sample_id, .keep_all = TRUE)  %>%
arrange(desc(af_perc)) %>%
pull(sample_id)
# Re-order stacking element in each bar

phylum_sumCount3$tax_name <- factor(phylum_sumCount3$tax_name,
levels = taxa_oder)
# Stacked bar plot at phylum level with percentage labels
stackBarPlot<- ggplot(phylum_sumCount3,
aes(x = factor(sample_id, level = level_order),
y = count_perTaxon, # Use count as y-values
fill = tax_name)) +
geom_bar(position = "fill", # Stack elements and normalize height
stat = "identity") + # Tell ggplot2 the y-values
facet_wrap(vars(sex),
dir = "h",
labeller = label_value,
scales = "free_x") +  # Facet samples by environmental factor
theme(axis.text.x = element_blank(),
axis.ticks = element_blank())
stackBarPlot # Print ggplot



# Change legend labels
# names(species_table)

legendTax_df <- species_table %>%
filter(taxon_id %in% taxa_oder) %>%
distinct(taxon_id, .keep_all = TRUE) # Drop repeated names
legendTax_df2 <- legendTax_df[match(legendTax_df$taxon_id, taxa_oder), ]
# Extract legend values
legendVal <- taxa_oder
# Extract legend labels mapping to the above values
legendLab <- legendTax_df2$tax_name
# Modify the legend
stackBarPlot1 <- stackBarPlot +
scale_fill_discrete(breaks = c(legendVal),
labels = c(legendLab)) +
labs(fill = "") +
theme(legend.position="bottom",
# legend.title = element_text(color = "black", size = 10),



legend.text = element_text(color = "black", size = 8),
panel.background = element_rect(fill = "white"), # Panel background
axis.ticks.y = element_line(linewidth = 0.3)) + # y-axis tick width
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent)  # Axis label include % sign
stackBarPlot1 # Print plot
# Export ggplot
ggsave("./ggPlotStackBarPlot_phylumLevel.pdf", stackBarPlot1,
device = "pdf",
width = 12,
height = 8,
units = "in")
# Data sets included in obj
names(obj$data)
# Extract tax_abund (proportion per taxon)
countPerTaxon <- obj$data$tax_abund
colSums(countPerTaxon[,-1]) # Sum by columns
# Merge taxonomy rank table with the above data table by the column, taxon_id
taxaRank <- obj$data$class_data
taxaRank_distinct <- distinct(taxaRank, taxon_id, .keep_all = TRUE)
countPerTaxon_Rank <- countPerTaxon %>%
dplyr::left_join(taxaRank_distinct,
by = "taxon_id") %>%
select(-input_index)
dim(countPerTaxon_Rank)
head(countPerTaxon_Rank)
# Pie chart: proportion based on counts per taxon by env groups
stat_countPerTaxa_byGroup <- phylum_sumCount3 %>%
group_by(sex, tax_name) %>%
summarise(counts = sum(count_perTaxon), .groups = "drop")
stat_countPerTaxa_byGroup2 <- stat_countPerTaxa_byGroup %>%
group_by(sex) %>%
summarise(total_by_group = sum(counts))
stat_countPerTaxa_byGroup3 <- stat_countPerTaxa_byGroup %>%
left_join(stat_countPerTaxa_byGroup2,
by = "sex") %>%
mutate(prop =  counts/ total_by_group) # Calculate relative abundance
stat_countPerTaxa_byGroup4 <- stat_countPerTaxa_byGroup3 %>%
left_join(taxaRank_distinct, by = "tax_name")
# Subset phylum level
phylumByGroup <- stat_countPerTaxa_byGroup4 %>%
select(-taxon_id, -input_index)
ggPie <- ggplot(phylumByGroup,
aes(x = "", y = prop, fill = tax_name)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +  # Polar coordination
scale_fill_discrete(name = "",
breaks = legendVal,
labels = legendLab) +
facet_grid(cols = vars(sex)) +
theme_void() +
theme(legend.position = "bottom")
ggPie # Print
# Export pie chart
ggsave("./ggPlotPie_phylum.pdf",
ggPie,
width = 12,
height = 8,
units = "in")
# Subset phylum level, and add up count per taxon (instead of per sample)
phylum_sumCount <- taxa_data_df1_long %>%
dplyr::filter(tax_rank == "p_") %>%
gather(key = "sample_id",
value = "count",
-c(1:4, 55:56)) %>%
mutate(count = as.numeric(count)) %>%
group_by(sample_id, # Aggregate counts per taxon
tax_name) %>%
summarise(count_perTaxon =  sum(count),
.groups = "drop")
# Subset phylum level, and add up count per taxon (instead of per sample)
phylum_sumCount <- taxa_data_df1_long %>%
dplyr::filter(tax_rank == "p_") %>%
gather(key = "sample_id",
value = "count",
-c(1:4, 55:56))
phylum_sumCount
# Subset phylum level, and add up count per taxon (instead of per sample)
phylum_sumCount <- taxa_data_df1_long %>%
dplyr::filter(tax_rank == "p_") %>%
gather(key = "sample_id",
value = "count",
-c(1:4, 55:56))
phylum_sumCount
which(is.na(phylum_sumCount))
which(is.na(phylum_sumCount$count))
phylum_sumCount
# Subset phylum level, and add up count per taxon (instead of per sample)
phylum_sumCount <- taxa_data_df1_long %>%
dplyr::filter(tax_rank == "p_") %>%
gather(key = "sample_id",
value = "count",
-c(1:4, 55:56)) %>%
filter(!is.na(count)) %>%
mutate(count = as.numeric(count))
# Subset phylum level, and add up count per taxon (instead of per sample)
phylum_sumCount <- taxa_data_df1_long %>%
dplyr::filter(tax_rank == "p_") %>%
gather(key = "sample_id",
value = "count",
-c(1:4, 55:56)) %>%
filter(!is.na(count))
where(is.na(phylum_sumCount$count))
which(is.na(phylum_sumCount$count))
phylum_sumCount
?as.numeric
# Subset phylum level, and add up count per taxon (instead of per sample)
phylum_sumCount <- taxa_data_df1_long %>%
dplyr::filter(tax_rank == "p_") %>%
gather(key = "sample_id",
value = "count",
-c(1:4, 55:56)) %>%
filter(!is.na(count)) %>% # Remove OTU with NA in counts
mutate(count = as.numeric(count))
which(is.na(phylum_sumCount$count))
phylum_sumCount
?gather
# Subset phylum level, and add up count per taxon (instead of per sample)
phylum_sumCount <- taxa_data_df1_long %>%
dplyr::filter(tax_rank == "p_") %>%
gather(key = "sample_id",
value = "count",
-c(1:4, 55:56),
na.rm = TRUE)
phylum_sumCount
taxa_data_df1_long
names(taxa_data_df1_long)
names(taxa_data_df1)
# Reshape table for the following plotting purpose
taxa_data_df1_long <- taxa_data_df1 %>%
gather(key = "tax_rank",
value = "tax_name",
-c(1:52))
names(taxa_data_df1_long)
taxa_data_df1_long
# Reshape table for the following plotting purpose
taxa_data_df1_long <- taxa_data_df1 %>%
gather(key = "tax_rank",
value = "tax_name",
-c(1:52))
names(taxa_data_df1)
taxa_data_df1_long
# Reshape table for the following plotting purpose
taxa_data_df1_long <- taxa_data_df1 %>%
gather(key = "tax_rank",
value = "tax_name",
-c(1:52))
taxa_data_df1_long
# Reshape table for the following plotting purpose
taxa_data_df1_long <- taxa_data_df1 %>%
gather(key = "tax_rank",
value = "tax_name",
-c(1:52))
taxa_data_df1_long
taxa_data_df1
names(taxa_data_df1)
names(taxa_data_df1_long)
# Subset phylum level, and add up count per taxon (instead of per sample)
phylum_sumCount <- taxa_data_df1_long %>%
dplyr::filter(tax_rank == "p_") %>%
gather(key = "sample_id",
value = "count",
-c(1:2, 53:54),
na.rm = TRUE) %>%
group_by(sample_id, # Aggregate counts per taxon
tax_name) %>%
summarise(count_perTaxon = sum(count),
.groups = "drop")
phylum_sumCount
# Subset phylum level, and add up count per taxon (instead of per sample)
phylum_sumCount <- taxa_data_df1_long %>%
dplyr::filter(tax_rank == "p_") %>%
gather(key = "sample_id",
value = "count",
-c(1:2, 53:54),
na.rm = TRUE) %>%
group_by(sample_id, # Aggregate counts per taxon
tax_name) %>%
summarise(count_perTaxon = sum(count),
.groups = "drop")
# Merge the above table with environmental variables by sample_id
phylum_sumCount2 <- phylum_sumCount %>%
left_join(hmp_samples, by = "sample_id")
phylum_sumCount3 <- phylum_sumCount2 %>%
mutate(sex = str_replace(sex, "^male", "Male")) %>%  # Replace male with Male
mutate(sex = str_replace(sex, "female", "Female")) %>% # Replace Female with female
filter(!is.na(tax_name))
topTaxon <- phylum_sumCount3 %>%
group_by(tax_name) %>%
summarise(averageCount = ave(count_perTaxon),
.groups = "drop") %>%
arrange(desc(averageCount)) %>%
distinct(tax_name, .keep_all = T) %>%
head(1) %>% # the top taxon with the most average counts across samples
pull(tax_name)
# Extract re-ordered taxa names
taxa_oder <- phylum_sumCount3 %>%
group_by(tax_name) %>%
summarise(averageCount = ave(count_perTaxon),
.groups = "drop") %>%
arrange(desc(averageCount)) %>%
distinct(tax_name, .keep_all = TRUE) %>%
filter(!is.na(tax_name)) %>%
pull(tax_name)
# Reorder sample_id by counts of "af"
afCount_df <- phylum_sumCount3 %>%
filter(tax_name == "af") %>%
select(sample_id, af_count = count_perTaxon)
# Descending order
phylum_sumCount4 <- phylum_sumCount3 %>%
left_join(afCount_df, by = "sample_id") %>%
arrange(desc(af_count))
# Extract re-ordered sample_id


level_order <- phylum_sumCount4 %>%
group_by(sample_id) %>%
summarise(af_perc = af_count/sum(count_perTaxon), .groups = "drop") %>%
distinct(sample_id, .keep_all = TRUE)  %>%
arrange(desc(af_perc)) %>%
pull(sample_id)
# Re-order stacking element in each bar
phylum_sumCount3$tax_name <- factor(phylum_sumCount3$tax_name,
levels = taxa_oder)
# Stacked bar plot at phylum level with percentage labels
stackBarPlot<- ggplot(phylum_sumCount3,
aes(x = factor(sample_id, level = level_order),
y = count_perTaxon, # Use count as y-values
fill = tax_name)) +
geom_bar(position = "fill", # Stack elements and normalize height
stat = "identity") + # Tell ggplot2 the y-values
facet_wrap(vars(sex),
dir = "h",
labeller = label_value,
scales = "free_x") +  # Facet samples by environmental factor
theme(axis.text.x = element_blank(),
axis.ticks = element_blank())
stackBarPlot # Print ggplot


# Change legend labels
# names(species_table)
legendTax_df <- species_table %>%
filter(taxon_id %in% taxa_oder) %>%
distinct(taxon_id, .keep_all = TRUE) # Drop repeated names
legendTax_df2 <- legendTax_df[match(legendTax_df$taxon_id, taxa_oder), ]
# Extract legend values
legendVal <- taxa_oder
# Extract legend labels mapping to the above values
legendLab <- legendTax_df2$tax_name

# Modify the legend
stackBarPlot1 <- stackBarPlot +
scale_fill_discrete(breaks = c(legendVal),
labels = c(legendLab)) +
labs(fill = "") +
theme(legend.position="bottom",
# legend.title = element_text(color = "black", size = 10),
legend.text = element_text(color = "black", size = 8),
panel.background = element_rect(fill = "white"), # Panel background


# Export ggplot

ggsave("./ggPlotStackBarPlot_phylumLevel.pdf", stackBarPlot1,
device = "pdf",
width = 12,
height = 8,
units = "in")


# Data sets included in obj
names(obj$data)
# Extract tax_abund (proportion per taxon)
countPerTaxon <- obj$data$tax_abund
colSums(countPerTaxon[,-1]) # Sum by columns
# Merge taxonomy rank table with the above data table by the column, taxon_id
taxaRank <- obj$data$class_data
taxaRank_distinct <- distinct(taxaRank, taxon_id, .keep_all = TRUE)
countPerTaxon_Rank <- countPerTaxon %>%
dplyr::left_join(taxaRank_distinct,
by = "taxon_id") %>%
select(-input_index)
dim(countPerTaxon_Rank)
head(countPerTaxon_Rank)

# Pie chart: proportion based on counts per taxon by env groups
stat_countPerTaxa_byGroup <- phylum_sumCount3 %>%
group_by(sex, tax_name) %>%
summarise(counts = sum(count_perTaxon), .groups = "drop")
stat_countPerTaxa_byGroup2 <- stat_countPerTaxa_byGroup %>%
group_by(sex) %>%
summarise(total_by_group = sum(counts))

stat_countPerTaxa_byGroup3 <- stat_countPerTaxa_byGroup %>%
left_join(stat_countPerTaxa_byGroup2,
by = "sex") %>%
mutate(prop =  counts/ total_by_group) # Calculate relative abundance
stat_countPerTaxa_byGroup4 <- stat_countPerTaxa_byGroup3 %>%


left_join(taxaRank_distinct, by = "tax_name")
# Subset phylum level
phylumByGroup <- stat_countPerTaxa_byGroup4 %>%
select(-taxon_id, -input_index)

ggPie <- ggplot(phylumByGroup,
aes(x = "", y = prop, fill = tax_name)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +  # Polar coordination
scale_fill_discrete(name = "",
breaks = legendVal,
labels = legendLab) +
facet_grid(cols = vars(sex)) +
theme_void() +
theme(legend.position = "bottom")
ggPie # Print

# Export pie chart

ggsave("./ggPlotPie_phylum.pdf",
ggPie,
width = 12,
height = 8,
units = "in")

phylum_sumCount3
phylum_sumCount3 %>%
group_by(sex) %>%
summarise(sampleSize = n())
table(phylum_sumCount3$sex)
# Sample sizes of faceted plots (environmental groupings, eg sex)
table(phylum_sumCount3$sex) %>% as.data.frame()
# Sample sizes of faceted plots (environmental groupings, eg sex)
sampleSize_df <- table(phylum_sumCount3$sex) %>% as.data.frame()
View(sampleSize_df)
# Define levels of the environmental groups
phylum_sumCount3 %>%
mutate(sex = as.factor(sex))
levels(phylum_sumCount3$sex)
phylum_sumCount3$sex
str(phylum_sumCount3$sex)
# Define levels of the environmental groups
phylum_sumCount3 %>%
mutate(sex = as.factor(sex))
str(phylum_sumCount3$sex)
# Define levels of the environmental groups
phylum_sumCount3 <- phylum_sumCount3 %>%
mutate(sex = as.factor(sex))
str(phylum_sumCount3$sex)
# Sample sizes of faceted plots (environmental groupings, eg sex)
sampleSize_df <- table(phylum_sumCount3$sex) %>% as.data.frame()
View(sampleSize_df)

