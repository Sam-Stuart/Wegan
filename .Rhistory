group_by(tax_name) %>%
summarise(averageCount = ave(count_perTaxon),
.groups = "drop") %>%
arrange(desc(averageCount)) %>%
distinct(tax_name, .keep_all = TRUE) %>%
pull(tax_name)
# Extract legend values
legendVal <- taxa_oder
# Extract legend labels mapping to the above values
legendLab <- legendTax_df$tax_name
legendLab
# Change legend labels
taxLabel <- unique(phylum_sumCount3$tax_name)
names(species_table)
legendTax_df <- species_table %>%
filter(taxon_id %in% taxa_oder) %>%
distinct(taxon_id, .keep_all = TRUE) # Drop repeated names
View(legendTax_df)
match(legendTax_df$taxon_id, taxa_oder)
legendTax_df[match(legendTax_df$taxon_id, taxa_oder), ]
legendTax_df2 <- legendTax_df[match(legendTax_df$taxon_id, taxa_oder), ]
# Extract legend labels mapping to the above values
legendLab <- legendTax_df2$tax_name
legendLab
legendVal
# Change legend labels
# names(species_table)
legendTax_df <- species_table %>%
filter(taxon_id %in% taxa_oder) %>%
distinct(taxon_id, .keep_all = TRUE) # Drop repeated names
legendTax_df <- species_table %>%
filter(taxon_id %in% taxa_oder) %>%
distinct(taxon_id, .keep_all = TRUE) # Drop repeated names
taxa_oder
taxa_oder
View(phylum_sumCount3)
View(phylum_sumCount2)
View(phylum_sumCount)
View(taxa_data_df1_long)
taxa_data_df1_long %>%
dplyr::filter(tax_rank == "p_")
taxa_data_df1_long %>%
dplyr::filter(tax_rank == "p_")
View(phylum_sumCount)
any.na(taxa_data_df1_long$taxon_id)
which(is.na(taxa_data_df1_long$taxon_id))
which(is.na(taxa_data_df1_long$sample_id))
which(is.na(taxa_data_df1_long$tax_rank))
which(is.na(taxa_data_df1_long))
taxa_data_df1_long[330509, ]
# Extract re-ordered taxa names
taxa_oder <- phylum_sumCount3 %>%
group_by(tax_name) %>%
summarise(averageCount = ave(count_perTaxon),
.groups = "drop") %>%
arrange(desc(averageCount)) %>%
distinct(tax_name, .keep_all = TRUE) %>%
filter(!is.na(tax_name)) %>%
pull(tax_name)
legendTax_df <- species_table %>%
filter(taxon_id %in% taxa_oder) %>%
distinct(taxon_id, .keep_all = TRUE) # Drop repeated names
legendTax_df2 <- legendTax_df[match(legendTax_df$taxon_id, taxa_oder), ]
# Extract legend values
legendVal <- taxa_oder
# Extract legend labels mapping to the above values
legendLab <- legendTax_df2$tax_name
# Modify the legend
stackBarPlot1 <- stackBarPlot +
scale_fill_discrete(breaks = c(legendVal, NA),
labels = c(legendLab, "Unknown")) +
labs(fill = "") +
theme(legend.position="bottom",
# legend.title = element_text(color = "black", size = 10),
legend.text = element_text(color = "black", size = 8))
stackBarPlot1 # Print plot
# Modify the legend
stackBarPlot1 <- stackBarPlot +
scale_fill_discrete(breaks = c(legendVal),
labels = c(legendLab)) +
labs(fill = "") +
theme(legend.position="bottom",
# legend.title = element_text(color = "black", size = 10),
legend.text = element_text(color = "black", size = 8))
stackBarPlot1 # Print plot
# Re-order stacking element in each bar
phylum_sumCount3$tax_name %>% factor(phylum_sumCount3$tax_name,
levels = taxa_oder)
taxa_oder
phylum_sumCount3$tax_name
phylum_sumCount3 <- phylum_sumCount2 %>%
mutate(sex = str_replace(sex, "^male", "Male")) %>%  # Replace male with Male
mutate(sex = str_replace(sex, "female", "Female")) %>% # Replace Female with female
filter(!is.na(tax_name))
topTaxon <- phylum_sumCount3 %>%
group_by(tax_name) %>%
summarise(averageCount = ave(count_perTaxon),
.groups = "drop") %>%
arrange(desc(averageCount)) %>%
distinct(tax_name, .keep_all = T) %>%
head(1) %>% # the top taxon with the most average counts across samples
pull(tax_name)
# Extract re-ordered taxa names
taxa_oder <- phylum_sumCount3 %>%
group_by(tax_name) %>%
summarise(averageCount = ave(count_perTaxon),
.groups = "drop") %>%
arrange(desc(averageCount)) %>%
distinct(tax_name, .keep_all = TRUE) %>%
filter(!is.na(tax_name)) %>%
pull(tax_name)
# Reorder sample_id by counts of "af"
afCount_df <- phylum_sumCount3 %>%
filter(tax_name == "af") %>%
select(sample_id, af_count = count_perTaxon)
# Descending order
phylum_sumCount4 <- phylum_sumCount3 %>%
left_join(afCount_df, by = "sample_id") %>%
arrange(desc(af_count))
# Extract re-ordered sample_id
level_order <- phylum_sumCount4 %>%
distinct(sample_id) %>%
pull(sample_id)
# Re-order stacking element in each bar
phylum_sumCount3$tax_name %>% factor(phylum_sumCount3$tax_name,
levels = taxa_oder)
?factor
phylum_sumCount3$tax_name
taxa_oder
unique(phylum_sumCount3$tax_name) %>% length()
# Re-order stacking element in each bar
phylum_sumCount3$tax_name %>% factor(phylum_sumCount3$tax_name,
levels = taxa_oder)
unique(phylum_sumCount3$tax_name) %in% taxa_oder
# Re-order stacking element in each bar
phylum_sumCount3$tax_name %>% factor(phylum_sumCount3$tax_name,
levels = taxa_oder)
# Re-order stacking element in each bar
phylum_sumCount3$tax_name %>% factor(phylum_sumCount3$tax_name,
levels = taxa_oder)
# Re-order stacking element in each bar
phylum_sumCount3$tax_name %>% factor(as.factor(phylum_sumCount3$tax_name),
levels = taxa_oder)
# Re-order stacking element in each bar
phylum_sumCount3$tax_name <- factor(phylum_sumCount3$tax_name,
levels = taxa_oder)
# Stacked bar plot at phylum level with percentage labels
stackBarPlot<- ggplot(phylum_sumCount3,
aes(x = factor(sample_id, level = level_order),
y = count_perTaxon, # Use count as y-values
fill = tax_name)) +
geom_bar(position = "fill", # Stack elements and normalize height
stat = "identity") + # Tell ggplot2 the y-values
facet_wrap(vars(sex),
dir = "h",
labeller = label_value,
scales = "free_x") +  # Facet samples by environmental factor
theme(axis.text.x = element_blank(),
axis.ticks = element_blank())
stackBarPlot # Print ggplot
legendTax_df <- species_table %>%
filter(taxon_id %in% taxa_oder) %>%
distinct(taxon_id, .keep_all = TRUE) # Drop repeated names
legendTax_df2 <- legendTax_df[match(legendTax_df$taxon_id, taxa_oder), ]
# Extract legend values
legendVal <- taxa_oder
# Extract legend labels mapping to the above values
legendLab <- legendTax_df2$tax_name
# Modify the legend
stackBarPlot1 <- stackBarPlot +
scale_fill_discrete(breaks = c(legendVal),
labels = c(legendLab)) +
labs(fill = "") +
theme(legend.position="bottom",
# legend.title = element_text(color = "black", size = 10),
legend.text = element_text(color = "black", size = 8))
stackBarPlot1 # Print plot
phylum_sumCount4 %>%
group_by(sample_id) %>%
summarise(af_perc = af_count/sum(count_perTaxon))
level_order <- phylum_sumCount4 %>%
group_by(sample_id) %>%
summarise(af_perc = af_count/sum(count_perTaxon), .groups = "drop") %>%
distinct(sample_id) %>%
arrange(desc(af_perc)) %>%
pull(sample_id)
phylum_sumCount4 %>%
group_by(sample_id) %>%
summarise(af_perc = af_count/sum(count_perTaxon), .groups = "drop") %>%
distinct(sample_id) %>%
arrange(desc(af_perc)) %>%
pull(sample_id)
phylum_sumCount4 %>%
group_by(sample_id) %>%
summarise(af_perc = af_count/sum(count_perTaxon), .groups = "drop") %>%
distinct(sample_id)
phylum_sumCount4 %>%
group_by(sample_id) %>%
summarise(af_perc = af_count/sum(count_perTaxon), .groups = "drop") %>%
distinct(sample_id, .keep_all = TRUE)
phylum_sumCount4 %>%
group_by(sample_id) %>%
summarise(af_perc = af_count/sum(count_perTaxon), .groups = "drop") %>%
distinct(sample_id, .keep_all = TRUE)  %>%
arrange(desc(af_perc)) %>%
pull(sample_id)
level_order <- phylum_sumCount4 %>%
group_by(sample_id) %>%
summarise(af_perc = af_count/sum(count_perTaxon), .groups = "drop") %>%
distinct(sample_id, .keep_all = TRUE)  %>%
arrange(desc(af_perc)) %>%
pull(sample_id)
# Re-order stacking element in each bar
phylum_sumCount3$tax_name <- factor(phylum_sumCount3$tax_name,
levels = taxa_oder)
# Stacked bar plot at phylum level with percentage labels
stackBarPlot<- ggplot(phylum_sumCount3,
aes(x = factor(sample_id, level = level_order),
y = count_perTaxon, # Use count as y-values
fill = tax_name)) +
geom_bar(position = "fill", # Stack elements and normalize height
stat = "identity") + # Tell ggplot2 the y-values
facet_wrap(vars(sex),
dir = "h",
labeller = label_value,
scales = "free_x") +  # Facet samples by environmental factor
theme(axis.text.x = element_blank(),
axis.ticks = element_blank())
stackBarPlot # Print ggplot
# Modify the legend
stackBarPlot1 <- stackBarPlot +
scale_fill_discrete(breaks = c(legendVal),
labels = c(legendLab)) +
labs(fill = "") +
theme(legend.position="bottom",
# legend.title = element_text(color = "black", size = 10),
legend.text = element_text(color = "black", size = 8)) +
xlab("")
stackBarPlot1 # Print plot
library(scales)
# Modify the legend
stackBarPlot1 <- stackBarPlot +
scale_fill_discrete(breaks = c(legendVal),
labels = c(legendLab)) +
labs(fill = "") +
theme(legend.position="bottom",
# legend.title = element_text(color = "black", size = 10),
legend.text = element_text(color = "black", size = 8)) +
xlab("Sample") +
ylab("") +
scale_y_continuous(labels = scales::percent)
stackBarPlot1 # Print plot
# Modify the legend
stackBarPlot1 <- stackBarPlot +
scale_fill_discrete(breaks = c(legendVal),
labels = c(legendLab)) +
labs(fill = "") +
theme(legend.position="bottom",
# legend.title = element_text(color = "black", size = 10),
legend.text = element_text(color = "black", size = 8)) +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent)  # Axis label include % sign
stackBarPlot1 # Print plot
# Modify the legend
stackBarPlot1 <- stackBarPlot +
scale_fill_discrete(breaks = c(legendVal),
labels = c(legendLab)) +
labs(fill = "") +
theme(legend.position="bottom",
# legend.title = element_text(color = "black", size = 10),
legend.text = element_text(color = "black", size = 8),
plot.background = element_rect(fill = "")) +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent)  # Axis label include % sign
stackBarPlot1 # Print plot
# Modify the legend
stackBarPlot1 <- stackBarPlot +
scale_fill_discrete(breaks = c(legendVal),
labels = c(legendLab)) +
labs(fill = "") +
theme(legend.position="bottom",
# legend.title = element_text(color = "black", size = 10),
legend.text = element_text(color = "black", size = 8),
plot.background = element_rect(fill = "white")) +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent)  # Axis label include % sign
stackBarPlot1 # Print plot
# Modify the legend
stackBarPlot1 <- stackBarPlot +
scale_fill_discrete(breaks = c(legendVal),
labels = c(legendLab)) +
labs(fill = "") +
theme(legend.position="bottom",
# legend.title = element_text(color = "black", size = 10),
legend.text = element_text(color = "black", size = 8),
plot.background = element_rect(fill = "red")) +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent)  # Axis label include % sign
stackBarPlot1 # Print plot
# Modify the legend
stackBarPlot1 <- stackBarPlot +
scale_fill_discrete(breaks = c(legendVal),
labels = c(legendLab)) +
labs(fill = "") +
theme(legend.position="bottom",
# legend.title = element_text(color = "black", size = 10),
legend.text = element_text(color = "black", size = 8),
panel.background = element_rect(fill = "white")) +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent)  # Axis label include % sign
stackBarPlot1 # Print plot
scale_y_continuous
?scale_y_continuous
# Modify the legend
stackBarPlot1 <- stackBarPlot +
scale_fill_discrete(breaks = c(legendVal),
labels = c(legendLab)) +
labs(fill = "") +
theme(legend.position="bottom",
# legend.title = element_text(color = "black", size = 10),
legend.text = element_text(color = "black", size = 8),
panel.background = element_rect(fill = "white"), # Panel background
axis.ticks.y = element_line(linewidth = 1)) +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent)  # Axis label include % sign
stackBarPlot1 # Print plot
# Modify the legend
stackBarPlot1 <- stackBarPlot +
scale_fill_discrete(breaks = c(legendVal),
labels = c(legendLab)) +
labs(fill = "") +
theme(legend.position="bottom",
# legend.title = element_text(color = "black", size = 10),
legend.text = element_text(color = "black", size = 8),
panel.background = element_rect(fill = "white"), # Panel background
axis.ticks.y = element_line(linewidth = 0.5)) +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent)  # Axis label include % sign
stackBarPlot1 # Print plot
# Modify the legend
stackBarPlot1 <- stackBarPlot +
scale_fill_discrete(breaks = c(legendVal),
labels = c(legendLab)) +
labs(fill = "") +
theme(legend.position="bottom",
# legend.title = element_text(color = "black", size = 10),
legend.text = element_text(color = "black", size = 8),
panel.background = element_rect(fill = "white"), # Panel background
axis.ticks.y = element_line(linewidth = 0.3)) +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent)  # Axis label include % sign
stackBarPlot1 # Print plot
ggsave(stackBarPlot1, "ggPlotStackBarPlot_phylumLevel.pdf")
?ggsave
ggsave("ggPlotStackBarPlot_phylumLevel.pdf", stackBarPlot1)
ggsave("./ggPlotStackBarPlot_phylumLevel.pdf", stackBarPlot1)
ggsave("./Phylogeny_output/ggPlotStackBarPlot_phylumLevel.pdf", stackBarPlot1)
ggsave("./Phylogeny_output/ggPlotStackBarPlot_phylumLevel.pdf", stackBarPlot1)
getwd()
ggsave("./ggPlotStackBarPlot_phylumLevel.pdf", stackBarPlot1)
?ggsave
ggsave("./ggPlotStackBarPlot_phylumLevel.pdf", stackBarPlot1,
device = "pdf",
width = 8,
height = 12,
units = "in")
ggsave("./ggPlotStackBarPlot_phylumLevel.pdf", stackBarPlot1,
device = "pdf",
width = 12,
height = 8,
units = "in")
phylumByGroup
stat_countPerTaxa_byGroup4
countPerTaxon_Rank_long
countPerTaxon_Rank
phylum_sumCount3
countPerTaxon_Rank
phylum_sumCount3
countPerTaxon_Rank_long
phylum_sumCount3
phylum_sumCount3
# Pie chart: proportion based on counts per taxon by env groups
stat_countPerTaxa_byGroup <- phylum_sumCount3 %>%
group_by(sex, tax_name) %>%
summarise(counts = sum(count_perTaxon), .groups = "drop")
stat_countPerTaxa_byGroup2 <- stat_countPerTaxa_byGroup %>%
group_by(sex) %>%
summarise(total_by_group = sum(counts))
stat_countPerTaxa_byGroup2 <- stat_countPerTaxa_byGroup %>%
group_by(sex) %>%
summarise(total_by_group = sum(counts))
stat_countPerTaxa_byGroup3 <- stat_countPerTaxa_byGroup %>%
left_join(stat_countPerTaxa_byGroup2,
by = "sex") %>%
mutate(prop =  counts/ total_by_group) # Calculate relative abundance
stat_countPerTaxa_byGroup4 <- stat_countPerTaxa_byGroup3 %>%
left_join(taxaRank_distinct, by = "taxon_id")
stat_countPerTaxa_byGroup4 <- stat_countPerTaxa_byGroup3 %>%
left_join(taxaRank_distinct, by = "tax_name")
stat_countPerTaxa_byGroup4
# Subset phylum level
phylumByGroup <- stat_countPerTaxa_byGroup4 %>%
select(-taxon_id, -input_index)
ggplot(phylumByGroup,
aes(x = "", y = prop, fill = tax_name)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +  # Polar coordination
scale_fill_discrete(name = "Taxonomy",
breaks = legendVal,
labels = legendLab) +
facet_grid(cols = vars(sex)) +
theme_void()
ggPie <- ggplot(phylumByGroup,
aes(x = "", y = prop, fill = tax_name)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +  # Polar coordination
scale_fill_discrete(name = "Taxonomy",
breaks = legendVal,
labels = legendLab) +
facet_grid(cols = vars(sex)) +
theme_void()
ggPie
ggsave("./ggPlotPie_phylum.pdf",
ggPie,
width = 12,
height = 8,
units = "in")
ggPie <- ggplot(phylumByGroup,
aes(x = "", y = prop, fill = tax_name)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +  # Polar coordination
scale_fill_discrete(name = "Taxonomy",
breaks = legendVal,
labels = legendLab) +
facet_grid(cols = vars(sex)) +
theme(legend.position = "bottom") +
theme_void()
ggPie # Print
ggsave("./ggPlotPie_phylum.pdf",
ggPie,
width = 12,
height = 8,
units = "in")
ggPie # Print
ggPie <- ggplot(phylumByGroup,
aes(x = "", y = prop, fill = tax_name)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +  # Polar coordination
scale_fill_discrete(name = "Taxonomy",
breaks = legendVal,
labels = legendLab) +
facet_grid(cols = vars(sex)) +
theme(legend.position = "bottom")
ggPie # Print
ggPie <- ggplot(phylumByGroup,
aes(x = "", y = prop, fill = tax_name)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +  # Polar coordination
scale_fill_discrete(name = "Taxonomy",
breaks = legendVal,
labels = legendLab) +
facet_grid(cols = vars(sex)) +
theme(legend.position = "bottom",
plot.background = element_blank())
ggPie # Print
ggPie <- ggplot(phylumByGroup,
aes(x = "", y = prop, fill = tax_name)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +  # Polar coordination
scale_fill_discrete(name = "Taxonomy",
breaks = legendVal,
labels = legendLab) +
facet_grid(cols = vars(sex)) +
theme(legend.position = "bottom",
plot.background = element_blank(),
panel.background = element_blank())
ggPie # Print
ggPie <- ggplot(phylumByGroup,
aes(x = "", y = prop, fill = tax_name)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +  # Polar coordination
scale_fill_discrete(name = "Taxonomy",
breaks = legendVal,
labels = legendLab) +
facet_grid(cols = vars(sex)) +
theme_void() +
theme(legend.position = "bottom")
ggPie # Print
ggPie <- ggplot(phylumByGroup,
aes(x = "", y = prop, fill = tax_name)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +  # Polar coordination
scale_fill_discrete(name = "",
breaks = legendVal,
labels = legendLab) +
facet_grid(cols = vars(sex)) +
theme_void() +
theme(legend.position = "bottom")
ggPie # Print
ggsave("./ggPlotPie_phylum.pdf",
ggPie,
width = 12,
height = 8,
units = "in")
